#!/bin/bash

# Helper functions for the FastAPI boilerplate generator

# Function to prompt for input with default value
prompt_with_default() {
    local prompt="$1"
    local default="$2"
    local result
    
    read -p "$prompt [$default]: " result
    echo "${result:-$default}"
}

# Function to confirm an action
confirm() {
    local prompt="$1"
    local default="${2:-n}"
    local response
    
    read -p "$prompt [y/N]: " response
    case "$response" in
        [yY][eE][sS]|[yY]) 
            return 0
            ;;
        *)
            return 1
            ;;
    esac
}

# Function to validate email format
validate_email() {
    local email="$1"
    local regex='^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    
    if [[ $email =~ $regex ]]; then
        return 0
    else
        return 1
    fi
}

# Function to sanitize project name
sanitize_project_name() {
    local name="$1"
    echo "$name" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9]/-/g' | sed 's/--*/-/g' | sed 's/^-\|-$//g'
}

# Function to create directory structure
create_directories() {
    local dirs=(
        "src"
        "src/api/endpoints"
        "src/auth"
        "src/core"
        "src/middleware"
        "src/models"
        "src/repositories"
        "src/schemas"
        "src/services"
        "src/utils"
        "tests"
        "logs"
        "docs"
        "alembic/versions"
    )
    
    # Add custom directories if specified
    if [[ ${#CUSTOM_DIRECTORIES[@]} -gt 0 ]]; then
        dirs+=("${CUSTOM_DIRECTORIES[@]}")
    fi
    
    # Create directories
    for dir in "${dirs[@]}"; do
        mkdir -p "$dir"
        print_debug "Created directory: $dir"
    done
    
    # Create __init__.py files for Python packages
    local python_dirs=(
        "src"
        "src/api"
        "src/api/endpoints"
        "src/auth"
        "src/core"
        "src/middleware"
        "src/models"
        "src/repositories"
        "src/schemas"
        "src/services"
        "src/utils"
        "tests"
    )
    
    for dir in "${python_dirs[@]}"; do
        touch "$dir/__init__.py"
        print_debug "Created __init__.py in: $dir"
    done
}

# Function to check if command exists
command_exists() {
    command -v "$1" >/dev/null 2>&1
}

# Function to get git user info safely
get_git_user_name() {
    git config user.name 2>/dev/null || echo "Your Name"
}

get_git_user_email() {
    git config user.email 2>/dev/null || echo "your.email@example.com"
}

# Function to generate random JWT secret
generate_jwt_secret() {
    if command_exists openssl; then
        openssl rand -hex 32
    elif command_exists python3; then
        python3 -c "import secrets; print(secrets.token_hex(32))"
    else
        # Fallback to a warning message
        echo "your-super-secret-jwt-key-change-this-in-production"
    fi
}

# Function to backup existing file
backup_file() {
    local file="$1"
    if [[ -f "$file" ]]; then
        local backup="${file}.backup.$(date +%Y%m%d_%H%M%S)"
        cp "$file" "$backup"
        print_status "Backed up existing file: $file -> $backup"
    fi
}

# Function to write file with header comment
write_file_with_header() {
    local file="$1"
    local description="$2"
    local content="$3"
    
    cat > "$file" << EOF
"""$description

Generated by FastAPI Boilerplate Generator
Project: $PROJECT_NAME
Author: $AUTHOR_NAME <$AUTHOR_EMAIL>
Generated: $(date)
"""

$content
EOF
}

# Function to append to requirements.txt
append_requirement() {
    local requirement="$1"
    local requirements_file="${2:-requirements.txt}"
    
    if ! grep -q "^$requirement" "$requirements_file" 2>/dev/null; then
        echo "$requirement" >> "$requirements_file"
        print_debug "Added requirement: $requirement"
    fi
}


# Function to create empty file with directory
create_file() {
    local file="$1"
    local dir=$(dirname "$file")
    
    mkdir -p "$dir"
    touch "$file"
}